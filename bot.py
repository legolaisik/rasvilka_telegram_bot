import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ParseMode, ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
import asyncio
import random

import sqlite3

conn = sqlite3.connect("bot.db")
cursor = conn.cursor()

from config import *
from sql_func import *
from api_func import *
from keyboard import *

logging.basicConfig(level=logging.INFO)

bot = Bot(token=bot_token, parse_mode=ParseMode.MARKDOWN_V2)

storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

class register(StatesGroup):
    new_profile = State()
    enter_profile_name = State()
    enter_salary = State()
    enter_skills = State()
    enter_education = State()
    enter_experience = State()
    enter_jobtime = State()
    enter_jobtype = State()

class lobby(StatesGroup):
    hello = State()
    profiles_list = State()
    
class profile(StatesGroup):
    get_vacancies = State()
    vacancies_list = State()
    get_skills_recommendations = State()
    skills_recommendations_list = State()

async def set_default_commands(dp):
    await dp.bot.set_my_commands([
        types.BotCommand("start", "start or restart bot")
    ])
    
    
@dp.message_handler(commands=['start'])
async def start(message: types.Message, state: FSMContext):
    if not await db_check_user(message.from_user.id, conn):
        await db_create_user(message.from_user.id, conn)
        await bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –≤–∞–∫–∞–Ω—Å–∏—é")
        await register.enter_profile_name.set()
    else:
        await bot.send_message(message.from_user.id, "–ü—Ä–∏–≤–µ—Ç\! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=main_keyboard)
        await lobby.profiles_list.set()

@dp.message_handler(state=register.new_profile)
async def create_new_profile(message: types.Message, state: FSMContext):
    # –£–¥–∞–ª–∏—Ç—å
    await register.enter_profile_name.set()
    

@dp.message_handler(state=register.enter_profile_name)
async def create_new_profile(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
                data['enter_profile_name'] = message.text
                profile_name = data['enter_profile_name']
    await bot.send_message(message.from_user.id, "–í—ã –≤–≤–µ–ª–∏ %s"%profile_name)
    await register.enter_profile_name.set()
    
@dp.message_handler(state=lobby.profiles_list)
async def lobby_handler(message: types.Message, state: FSMContext):
    if message.text == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ —Ç–µ–∫—É—â–µ–º—É –ø—Ä–æ—Ñ–∏–ª—é':
        answer = await get_vacancies(1, conn)
        await bot.send_message(message.from_user.id, answer, parse_mode=ParseMode.HTML)
    elif message.text == '–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç–µ–∫—É—â–µ–º—É –ø—Ä–æ—Ñ–∏–ª—é':
        keys = await get_recomendations(1, conn)
        await bot.send_message(message.from_user.id, '–í–∞–º –±—ã –ø–æ–¥—Ç—è–Ω—É—Ç—å —ç—Ç–∏ –Ω–∞–≤—ã–∫–∏: %s' % (', '.join(keys)), parse_mode=ParseMode )
    

if __name__ == '__main__':

    executor.start_polling(dp, skip_updates=True)
    
    
# async def show_lk(user_id, conn: sqlite3.Connection):
#     balance, total_win, total_game_wins, slot_coins, rating, count_players = await get_info(user_id, conn)
#     rate = round(rating / count_players * 100)
#     if rate == 0:
#         rate = 1
#     text = """ü™™ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–ª–∞–Ω—Å–µ*
# ü•á *–í—ã –≤ –¢–û–ü %d%% –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤*
# üèÜ *–°—É–º–º–∞ –≤—ã–∏–≥—Ä—ã—à–∞:* %.2f TON
# ü™ô *–°–ª–æ—Ç –∫–æ–∏–Ω–æ–≤:* %d

# üíµ¬†*–ë–∞–ª–∞–Ω—Å*: %.2f TON""" % (rate, total_win, slot_coins, balance,)
#     text = text.replace('.', '\.')
#     return text

# lobby_keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
# lobby_keyboard.add(KeyboardButton('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–ª–∞–Ω—Å–µ ü™™'))
# lobby_keyboard.add(KeyboardButton('–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å üíé'))
# lobby_keyboard.add(KeyboardButton('–ò–≥—Ä–∞—Ç—å üé≤'))
# lobby_keyboard.add(KeyboardButton('–ü–æ–º–æ—â—å üìÉ'))
# lobby_keyboard.add(KeyboardButton('–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ üíµ'))

# @dp.message_handler(state='*', commands=['start'])
# async def start(message: types.Message, state: FSMContext):
#     await register.hello.set()
#     keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)

#     if await check_user(message.from_user.id, conn):
#         await lobby.choose_action.set()
#         await bot.send_message(message.from_user.id, await show_lk(message.from_user.id, conn))
#         await bot.send_message(message.from_user.id, "–ü—Ä–∏–≤–µ—Ç üëãüèº\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ üìù", reply_markup=lobby_keyboard)

#     else:
#         keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
#         keyboard.add(KeyboardButton('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é'))
#         keyboard.add(KeyboardButton('–ù–µ—Ç'))
#         await register.license.set()

#         await message.reply("–ü—Ä–∏–≤–µ—Ç üëãüèº¬†\n–ü—Ä–µ–∂–¥–µ, —á–µ–º –º—ã –Ω–∞—á–Ω–µ–º –∏–≥—Ä–∞—Ç—å, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–∞—à–∏–º [_—Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º_ üìÉ](https://telegra.ph/Polzovatelskoe-soglashenie-01-13-5)", reply_markup=keyboard)

# @dp.message_handler(state=register.license)
# async def license_answer(message: types.Message, state: FSMContext):
#     if message.text ==  '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é':
#         if await create_user(message.from_user.id, conn):
#             await register.referal.set()
#             async with state.proxy() as data:
#                 ref = data['hello']
#             if ref == '':
#                 keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
#                 keyboard.add(KeyboardButton('–£ –º–µ–Ω—è –Ω–µ—Ç –∫–æ–¥–∞'))
#                 await bot.send_message(message.from_user.id, "–û—Ç–ª–∏—á–Ω–æ üôå¬†\n–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –Ω–∏–∂–µ üëá", reply_markup=keyboard)
#             else:
#                 await set_referal(message.from_user.id, ref, conn)
#                 await bot.send_message(message.from_user.id, "–û—Ç–ª–∏—á–Ω–æ üôå")
#                 await lobby.choose_action.set()
#                 await bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ üìù", reply_markup=lobby_keyboard)
#         else:
#             await bot.send_message(message.from_user.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
#     else:
#         await message.reply("–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–Ω—è—Ç—å [_—Å–æ–≥–ª–∞—à–µ–Ω–∏–µ_ üìÉ](https://telegra.ph/Polzovatelskoe-soglashenie-01-13-5)")
